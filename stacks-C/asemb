	.section	__TEXT,__text,regular,pure_instructions
	.macosx_version_min 10, 11
	.globl	_is_empty
	.align	4, 0x90
_is_empty:                              ## @is_empty
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp0:
	.cfi_def_cfa_offset 16
Ltmp1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	cmpl	$0, 8(%rdi)
	jg	LBB0_2
## BB#1:
	leaq	L_.str(%rip), %rdi
	movq	-16(%rbp), %rax
	movl	8(%rax), %esi
	movb	$0, %al
	callq	_printf
	movl	$1, -4(%rbp)
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	jmp	LBB0_3
LBB0_2:
	movl	$0, -4(%rbp)
LBB0_3:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	_is_full
	.align	4, 0x90
_is_full:                               ## @is_full
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp3:
	.cfi_def_cfa_offset 16
Ltmp4:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp5:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	cmpl	$9, 8(%rdi)
	jl	LBB1_2
## BB#1:
	leaq	L_.str.1(%rip), %rdi
	movq	-16(%rbp), %rax
	movl	8(%rax), %esi
	movb	$0, %al
	callq	_printf
	movl	$1, -4(%rbp)
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	jmp	LBB1_3
LBB1_2:
	movl	$0, -4(%rbp)
LBB1_3:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	_push
	.align	4, 0x90
_push:                                  ## @push
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp6:
	.cfi_def_cfa_offset 16
Ltmp7:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp8:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-16(%rbp), %rdi
	callq	_is_full
	cmpl	$0, %eax
	jne	LBB2_4
## BB#1:
	movl	$16, %eax
	movl	%eax, %edi
	callq	_malloc
	movq	%rax, -32(%rbp)
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	LBB2_3
## BB#2:
	leaq	L_.str.2(%rip), %rdi
	movb	$0, %al
	callq	_printf
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	-32(%rbp), %rcx
	movq	%rdi, 8(%rcx)
	movl	%eax, -36(%rbp)         ## 4-byte Spill
LBB2_3:
	leaq	L_.str.3(%rip), %rdi
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %edx
	addl	$1, %edx
	movl	%edx, 8(%rax)
	movl	-20(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movl	$0, -4(%rbp)
	movl	%eax, -40(%rbp)         ## 4-byte Spill
	jmp	LBB2_5
LBB2_4:
	leaq	L_.str.4(%rip), %rdi
	movl	-20(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movl	$1, -4(%rbp)
	movl	%eax, -44(%rbp)         ## 4-byte Spill
LBB2_5:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	_peek
	.align	4, 0x90
_peek:                                  ## @peek
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp9:
	.cfi_def_cfa_offset 16
Ltmp10:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp11:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	_is_empty
	cmpl	$0, %eax
	jne	LBB3_2
## BB#1:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	(%rax), %ecx
	movl	%ecx, -4(%rbp)
	jmp	LBB3_3
LBB3_2:
	movl	$0, -4(%rbp)
LBB3_3:
	movl	-4(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	_pop
	.align	4, 0x90
_pop:                                   ## @pop
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp12:
	.cfi_def_cfa_offset 16
Ltmp13:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp14:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	leaq	L_.str.5(%rip), %rax
	movq	%rdi, -16(%rbp)
	movq	%rax, %rdi
	movb	$0, %al
	callq	_printf
	movq	-16(%rbp), %rdi
	movl	%eax, -24(%rbp)         ## 4-byte Spill
	callq	_is_empty
	cmpl	$0, %eax
	jne	LBB4_2
## BB#1:
	leaq	L_.str.6(%rip), %rdi
	movb	$0, %al
	callq	_printf
	leaq	L_.str.7(%rip), %rdi
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	(%rcx), %edx
	movl	%edx, -20(%rbp)
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, (%rsi)
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 8(%rcx)
	movl	-20(%rbp), %esi
	movl	%eax, -28(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	movl	-20(%rbp), %edx
	movl	%edx, -4(%rbp)
	movl	%eax, -32(%rbp)         ## 4-byte Spill
	jmp	LBB4_3
LBB4_2:
	leaq	L_.str.8(%rip), %rdi
	movb	$0, %al
	callq	_printf
	movl	$1, -4(%rbp)
	movl	%eax, -36(%rbp)         ## 4-byte Spill
LBB4_3:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp15:
	.cfi_def_cfa_offset 16
Ltmp16:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp17:
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              ## imm = 0x100
	leaq	-32(%rbp), %rax
	movl	$0, -4(%rbp)
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$900, -32(%rbp)         ## imm = 0x384
	movq	$0, -24(%rbp)
	movq	%rax, -48(%rbp)
	movl	$10, -36(%rbp)
	movl	$1, -40(%rbp)
	movl	$1, -52(%rbp)
LBB5_1:                                 ## =>This Inner Loop Header: Depth=1
	movl	-52(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	LBB5_4
## BB#2:                                ##   in Loop: Header=BB5_1 Depth=1
	movslq	-52(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx,%rax,8), %rdi
	callq	_atoi
	leaq	-48(%rbp), %rdi
	movl	%eax, %esi
	callq	_push
	leaq	L_.str.9(%rip), %rdi
	movslq	-52(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rsi
	movl	%eax, -76(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	movl	%eax, -80(%rbp)         ## 4-byte Spill
## BB#3:                                ##   in Loop: Header=BB5_1 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	LBB5_1
LBB5_4:
	leaq	L_.str.10(%rip), %rdi
	movb	$0, %al
	callq	_printf
	leaq	L_.str.11(%rip), %rdi
	movl	-40(%rbp), %esi
	movl	%eax, -84(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	movq	-48(%rbp), %rdi
	movq	%rdi, -64(%rbp)
	movl	%eax, -88(%rbp)         ## 4-byte Spill
LBB5_5:                                 ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -64(%rbp)
	je	LBB5_7
## BB#6:                                ##   in Loop: Header=BB5_5 Depth=1
	leaq	L_.str.12(%rip), %rdi
	movq	-64(%rbp), %rax
	movl	(%rax), %esi
	movb	$0, %al
	callq	_printf
	movq	-64(%rbp), %rdi
	movq	8(%rdi), %rdi
	movq	%rdi, -64(%rbp)
	movl	%eax, -92(%rbp)         ## 4-byte Spill
	jmp	LBB5_5
LBB5_7:
	leaq	L_.str.10(%rip), %rdi
	movb	$0, %al
	callq	_printf
	leaq	L_.str.10(%rip), %rdi
	movl	%eax, -96(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.13(%rip), %rdi
	movl	-40(%rbp), %esi
	movl	%eax, -100(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	-48(%rbp), %rdi
	movl	%eax, -104(%rbp)        ## 4-byte Spill
	callq	_pop
	leaq	L_.str.14(%rip), %rdi
	movl	-40(%rbp), %esi
	movl	%eax, -108(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	-48(%rbp), %rdi
	movl	%eax, -112(%rbp)        ## 4-byte Spill
	callq	_pop
	leaq	-48(%rbp), %rdi
	movl	%eax, -116(%rbp)        ## 4-byte Spill
	callq	_pop
	leaq	-48(%rbp), %rdi
	movl	%eax, -120(%rbp)        ## 4-byte Spill
	callq	_pop
	leaq	-48(%rbp), %rdi
	movl	%eax, -124(%rbp)        ## 4-byte Spill
	callq	_pop
	leaq	-48(%rbp), %rdi
	movl	%eax, -128(%rbp)        ## 4-byte Spill
	callq	_pop
	leaq	-48(%rbp), %rdi
	movl	%eax, -132(%rbp)        ## 4-byte Spill
	callq	_pop
	leaq	-48(%rbp), %rdi
	movl	%eax, -136(%rbp)        ## 4-byte Spill
	callq	_pop
	movq	-48(%rbp), %rdi
	movq	%rdi, -64(%rbp)
	movl	%eax, -140(%rbp)        ## 4-byte Spill
LBB5_8:                                 ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -64(%rbp)
	je	LBB5_10
## BB#9:                                ##   in Loop: Header=BB5_8 Depth=1
	leaq	L_.str.12(%rip), %rdi
	movq	-64(%rbp), %rax
	movl	(%rax), %esi
	movb	$0, %al
	callq	_printf
	movq	-64(%rbp), %rdi
	movq	8(%rdi), %rdi
	movq	%rdi, -64(%rbp)
	movl	%eax, -144(%rbp)        ## 4-byte Spill
	jmp	LBB5_8
LBB5_10:
	leaq	L_.str.10(%rip), %rdi
	movb	$0, %al
	callq	_printf
	leaq	-48(%rbp), %rdi
	movl	$465, %esi              ## imm = 0x1D1
	movl	%eax, -148(%rbp)        ## 4-byte Spill
	callq	_push
	leaq	-48(%rbp), %rdi
	movl	$5, %esi
	movl	%eax, -152(%rbp)        ## 4-byte Spill
	callq	_push
	leaq	-48(%rbp), %rdi
	movl	$18, %esi
	movl	%eax, -156(%rbp)        ## 4-byte Spill
	callq	_push
	leaq	-48(%rbp), %rdi
	movl	$8443, %esi             ## imm = 0x20FB
	movl	%eax, -160(%rbp)        ## 4-byte Spill
	callq	_push
	leaq	-48(%rbp), %rdi
	movl	$19, %esi
	movl	%eax, -164(%rbp)        ## 4-byte Spill
	callq	_push
	leaq	-48(%rbp), %rdi
	movl	$133, %esi
	movl	%eax, -168(%rbp)        ## 4-byte Spill
	callq	_push
	leaq	-48(%rbp), %rdi
	movl	$6519, %esi             ## imm = 0x1977
	movl	%eax, -172(%rbp)        ## 4-byte Spill
	callq	_push
	leaq	-48(%rbp), %rdi
	movl	$12, %esi
	movl	%eax, -176(%rbp)        ## 4-byte Spill
	callq	_push
	leaq	-48(%rbp), %rdi
	movl	$42, %esi
	movl	%eax, -180(%rbp)        ## 4-byte Spill
	callq	_push
	leaq	-48(%rbp), %rdi
	movl	$15, %esi
	movl	%eax, -184(%rbp)        ## 4-byte Spill
	callq	_push
	leaq	-48(%rbp), %rdi
	movl	$139, %esi
	movl	%eax, -188(%rbp)        ## 4-byte Spill
	callq	_push
	leaq	-48(%rbp), %rdi
	movl	$82, %esi
	movl	%eax, -192(%rbp)        ## 4-byte Spill
	callq	_push
	movl	$16, %esi
	movl	%esi, %edi
	movl	%eax, -196(%rbp)        ## 4-byte Spill
	callq	_malloc
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -72(%rbp)
LBB5_11:                                ## =>This Inner Loop Header: Depth=1
	movb	$1, %al
	cmpq	$0, -72(%rbp)
	movb	%al, -197(%rbp)         ## 1-byte Spill
	jne	LBB5_13
## BB#12:                               ##   in Loop: Header=BB5_11 Depth=1
	movq	-72(%rbp), %rax
	cmpq	$0, 8(%rax)
	setne	%cl
	movb	%cl, -197(%rbp)         ## 1-byte Spill
LBB5_13:                                ##   in Loop: Header=BB5_11 Depth=1
	movb	-197(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB5_14
	jmp	LBB5_15
LBB5_14:                                ##   in Loop: Header=BB5_11 Depth=1
	leaq	L_.str.15(%rip), %rdi
	movb	$0, %al
	callq	_printf
	leaq	L_.str.16(%rip), %rdi
	movq	-72(%rbp), %rcx
	movq	8(%rcx), %rsi
	movl	%eax, -204(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.12(%rip), %rdi
	movq	-72(%rbp), %rcx
	movl	(%rcx), %esi
	movl	%eax, -208(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	movq	-72(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movl	%eax, -212(%rbp)        ## 4-byte Spill
	jmp	LBB5_11
LBB5_15:
	leaq	L_.str.17(%rip), %rdi
	movb	$0, %al
	callq	_printf
	leaq	L_.str.10(%rip), %rdi
	movl	%eax, -216(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.10(%rip), %rdi
	movl	%eax, -220(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	-48(%rbp), %rdi
	movl	%eax, -224(%rbp)        ## 4-byte Spill
	callq	_pop
	leaq	L_.str.18(%rip), %rdi
	movl	%eax, -228(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	movq	-48(%rbp), %rdi
	movq	%rdi, -64(%rbp)
	movl	%eax, -232(%rbp)        ## 4-byte Spill
LBB5_16:                                ## =>This Inner Loop Header: Depth=1
	movb	$1, %al
	cmpq	$0, -64(%rbp)
	movb	%al, -233(%rbp)         ## 1-byte Spill
	jne	LBB5_18
## BB#17:                               ##   in Loop: Header=BB5_16 Depth=1
	movq	-64(%rbp), %rax
	cmpq	$0, 8(%rax)
	setne	%cl
	movb	%cl, -233(%rbp)         ## 1-byte Spill
LBB5_18:                                ##   in Loop: Header=BB5_16 Depth=1
	movb	-233(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB5_19
	jmp	LBB5_20
LBB5_19:                                ##   in Loop: Header=BB5_16 Depth=1
	leaq	L_.str.19(%rip), %rdi
	movb	$0, %al
	callq	_printf
	leaq	L_.str.12(%rip), %rdi
	movq	-64(%rbp), %rcx
	movl	(%rcx), %esi
	movl	%eax, -240(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -64(%rbp)
	movl	%eax, -244(%rbp)        ## 4-byte Spill
	jmp	LBB5_16
LBB5_20:
	leaq	L_.str.20(%rip), %rdi
	movb	$0, %al
	callq	_printf
	leaq	L_.str.10(%rip), %rdi
	movl	%eax, -248(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.10(%rip), %rdi
	movl	%eax, -252(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	xorl	%ecx, %ecx
	movl	%eax, -256(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	addq	$256, %rsp              ## imm = 0x100
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"inside empty - count %d . \n"

L_.str.1:                               ## @.str.1
	.asciz	"inside  FULL - count %d . \n"

L_.str.2:                               ## @.str.2
	.asciz	"inside if \n"

L_.str.3:                               ## @.str.3
	.asciz	"push %d \n"

L_.str.4:                               ## @.str.4
	.asciz	"Sorry, cannot push %d to stack; capacity is full. \n"

L_.str.5:                               ## @.str.5
	.asciz	"2345345345-------, "

L_.str.6:                               ## @.str.6
	.asciz	"---wefs-ds-df-sdf-dsf-sd-fsd-fsd-fsd---, \n"

L_.str.7:                               ## @.str.7
	.asciz	"pop %d \n"

L_.str.8:                               ## @.str.8
	.asciz	"Sorry, cannot pop from the stack; it is empty. \n"

L_.str.9:                               ## @.str.9
	.asciz	"argv::%s, "

L_.str.10:                              ## @.str.10
	.asciz	"\n"

L_.str.11:                              ## @.str.11
	.asciz	"argv:--:count:--: %d\n"

L_.str.12:                              ## @.str.12
	.asciz	"%d, "

L_.str.13:                              ## @.str.13
	.asciz	"1 after pop op opopo popp count-------------%d, "

L_.str.14:                              ## @.str.14
	.asciz	"2 after pop op opopo popp count-------------%d, "

L_.str.15:                              ## @.str.15
	.asciz	"blahblah blah blah. \n"

L_.str.16:                              ## @.str.16
	.asciz	"%p, \n"

L_.str.17:                              ## @.str.17
	.asciz	"2 2 2 2 2 2 2 2 22 . \n"

L_.str.18:                              ## @.str.18
	.asciz	"3. \n"

L_.str.19:                              ## @.str.19
	.asciz	"derp. \n"

L_.str.20:                              ## @.str.20
	.asciz	"4444. \n"


.subsections_via_symbols
